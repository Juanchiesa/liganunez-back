openapi: 3.0.3
info:
  title: Liga Nunez
  description: |- 
    HTTP requests y responses documentadas
    
    Links de utilidad:
    - [Requerimientos](https://docs.google.com/document/d/1_kFwMBbmoDiY1nCElglinTN5vLZckk4n5RgaN-1zyKg/edit?pli=1)
    - [Tablero JIRA](https://venedicto.atlassian.net/jira/software/projects/LGN/boards/9)
  version: 1.2.0
servers:
  - url: http://localhost:8080/api/ln/
tags:
  - name: tournament
    description: Operaciones de torneos
  - name: user
    description: Operaciones de usuarios
  - name: picture
    description: Operaciones de fotos
paths:
  /user:
    get:
      tags:
        - user
      summary: Validación de existencia de usuario por email
      operationId: checkUserExistence
      parameters:
        - name: email
          in: header
          description: Email ingresado
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Usuario registrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
        '400':
          description: Error en la request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
        '404':
          description: Usuario no registrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
        '500':
          description: Error del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
        '503':
          description: Base de datos/Servicio email no disponibles
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
    post:
      tags:
        - user
      summary: Registro de un nuevo usuario
      operationId: createUser
      requestBody:
        description: Información del usuario (debe enviarse sin accessKey)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '201':
          description: Usuario generado con éxito
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
        '400':
          description: Error en la request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
        '500':
          description: Error del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
        '503':
          description: Base de datos/Servicio email no disponibles
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
  /user/update/password:
    post:
      tags:
        - user
      summary: Solicitud de actualización de password
      operationId: requestUserPasswordUpdate
      parameters:
        - name: userEmail
          in: header
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Solicitud de actualización de password generada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
        '404':
          description: Usuario inexistente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
        '500':
          description: Error del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
        '503':
          description: Base de datos/Servicio email no disponibles
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
    patch:
      tags:
        - user
      summary: Actualización de password
      operationId: updateUserPassword
      parameters:
        - name: requestCode
          in: header
          description: Código generado previamente
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Contraseña actualizada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
        '404':
          description: Código inexistente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
        '500':
          description: Error del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
        '503':
          description: Base de datos no disponible
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
  /user/login:
    get:
      tags:
        - user
      summary: Ingreso de un usuario al sistema
      operationId: loginUser
      parameters:
        - name: email
          in: header
          description: Correo electrónico ingresado
          required: true
          schema:
            type: string
        - name: password
          in: header
          description: Contraseña ingresada
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Login exitoso (sin email ni accessKey)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLoginHttpResponse'
        '400':
          description: Error en la request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
        '500':
          description: Error del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
        '503':
          description: Base de datos no disponible
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
  /tournament:
    get:
      tags:
        - tournament
      summary: Carga de torneos
      operationId: getTournamentsData
      parameters: []
      responses:
        '200':
          description: Información obtenida con éxito
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTournamentsHttpResponse'
        '500':
          description: Error del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
        '503':
          description: Base de datos no disponible
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
  /tournament/{id}:
    get:
      tags:
        - tournament
      summary: Carga de torneo
      operationId: getTournamentData
      parameters:
        - name: id
          in: path
          description: ID del torneo
          required: true
          schema:
            type: string
        - name: code
          in: header
          description: Código de acceso
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Información obtenida con éxito
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTournamentHttpResponse'
        '400':
          description: Error en la request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
        '404':
          description: Torneo inexistente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
        '500':
          description: Error del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
        '503':
          description: Base de datos no disponible
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
  /picture/{id}:
    delete:
      tags:
        - picture
      summary: Eliminar una foto
      operationId: deletePicture
      parameters:
        - name: id
          in: path
          description: ID de la imagen
          required: true
          schema:
            type: string
        - name: token
          in: header
          description: Token de autenticación del usuario
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Imagen eliminada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
        '404':
          description: Imagen inexistente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
        '500':
          description: Error del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
        '503':
          description: Base de datos no disponible
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
  /picture:
    get:
      tags:
        - picture
      summary: Obtención de fotos
      operationId: getPictures
      responses:
        '200':
          description: Imágenes obtenidas con éxito
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetPicturesHttpResponse'
        '404':
          description: No hay imágenes disponibles
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
        '500':
          description: Error del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
        '503':
          description: Base de datos/AWS no disponibles
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
  /picture/upload:
    post:
      tags:
        - picture
      summary: Carga de fotos
      operationId: uploadPictures
      parameters:
        - name: token
          in: header
          description: Token de autenticación del usuario
          required: false
          schema:
            type: string
      requestBody:
        description: Información de las imágenes
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Picture'
      responses:
        '200':
          description: Imágenes almacenadas con éxito
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
        '400':
          description: Error en la request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
        '500':
          description: Error del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
        '503':
          description: Base de datos/AWS no disponibles
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
components:
  schemas:
    Tournament:
      type: object
      properties:
        id:
          type: string
          example: "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        logo:
          type: string
          example: "http://google.com/images/ayudameloco"
        name:
          type: string
          example: "Torneo 1"
        type:
          type: string
          example: M
          enum: [F,M]
    Picture:
      type: object
      properties:
        id:
          type: string
          example: "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        tournamentId:
          type: string
          example: "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        date:
          type: string
          example: "15/06/2023"
        place:
          type: string
          example: "La Plata"
        file:
          type: string
          format: binary
          example: "bh5aLyZALN4othXL2mByHo1aZA5ts5k/uw/sc7DBngGY......"
    User:
      type: object
      properties:
        name:
          type: string
          example: "Juan Perez"
        age:
          type: integer
          example: 32
        address:
          type: string
          example: "Corrientes 800"
        permissionLevel:
          type: integer
          example: 1
        email:
          type: string
          example: "example@gmail.com"
        accessKey:
          type: string
          example: "943012"
    Error:
      type: object
      properties:
        code:
          type: string
          example: "P01"
        description:
          type: string
          example: "Error interno"
    HttpResponse:
      type: object
      properties:
        opCode:
          type: string
          example: "404"
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
    UserLoginHttpResponse:
      type: object
      allOf:
        - $ref: '#/components/schemas/HttpResponse'
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
        data:
          $ref: '#/components/schemas/User'
    GetTournamentsHttpResponse:
      type: object
      allOf:
        - $ref: '#/components/schemas/HttpResponse'
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Tournament'
    GetTournamentHttpResponse:
      type: object
      allOf:
        - $ref: '#/components/schemas/HttpResponse'
      properties:
        data:
          $ref: '#/components/schemas/Tournament'
    GetPicturesHttpResponse:
      type: object
      allOf:
        - $ref: '#/components/schemas/HttpResponse'
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Picture'