/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.46).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.venedicto.liganunez.api;

import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.venedicto.liganunez.model.http.GetTournamentHttpResponse;
import com.venedicto.liganunez.model.http.GetTournamentsHttpResponse;
import com.venedicto.liganunez.model.http.HttpResponse;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2023-06-29T13:59:06.488781089Z[GMT]")
@Validated
public interface TournamentApi {
    @Operation(summary = "Carga de torneo", description = "", tags={ "tournament" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Información obtenida con éxito", content = @Content(mediaType = "application/json", schema = @Schema(implementation = GetTournamentHttpResponse.class))),
        
        @ApiResponse(responseCode = "400", description = "Error en la request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = HttpResponse.class))),
        
        @ApiResponse(responseCode = "404", description = "Torneo inexistente", content = @Content(mediaType = "application/json", schema = @Schema(implementation = HttpResponse.class))),
        
        @ApiResponse(responseCode = "500", description = "Error del servidor", content = @Content(mediaType = "application/json", schema = @Schema(implementation = HttpResponse.class))),
        
        @ApiResponse(responseCode = "503", description = "Base de datos no disponible", content = @Content(mediaType = "application/json", schema = @Schema(implementation = HttpResponse.class))) })
    @RequestMapping(value = "/tournament/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<GetTournamentHttpResponse> getTournamentData(@Parameter(in = ParameterIn.PATH, description = "ID del torneo", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.HEADER, description = "Código de acceso" ,required=true,schema=@Schema()) @RequestHeader(value="code", required=true) String code);


    @Operation(summary = "Carga de torneos", description = "", tags={ "tournament" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Información obtenida con éxito", content = @Content(mediaType = "application/json", schema = @Schema(implementation = GetTournamentsHttpResponse.class))),
        
        @ApiResponse(responseCode = "500", description = "Error del servidor", content = @Content(mediaType = "application/json", schema = @Schema(implementation = HttpResponse.class))),
        
        @ApiResponse(responseCode = "503", description = "Base de datos no disponible", content = @Content(mediaType = "application/json", schema = @Schema(implementation = HttpResponse.class))) })
    @RequestMapping(value = "/tournament",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<GetTournamentsHttpResponse> getTournamentsData();
}