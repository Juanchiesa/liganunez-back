/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.46).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.venedicto.liganunez.api;

import javax.validation.Valid;

import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;

import com.venedicto.liganunez.model.GetTournamentHttpResponse;
import com.venedicto.liganunez.model.HttpResponse;
import com.venedicto.liganunez.model.Tournament;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2023-06-18T18:56:59.203396144Z[GMT]")
@Validated
public interface TournamentApi {

    @Operation(summary = "Creación de torneo", description = "", tags={ "tournament" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Torneo creado", content = @Content(mediaType = "application/json", schema = @Schema(implementation = HttpResponse.class))),
        
        @ApiResponse(responseCode = "400", description = "Error en la request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = HttpResponse.class))),
        
        @ApiResponse(responseCode = "500", description = "Error del servidor", content = @Content(mediaType = "application/json", schema = @Schema(implementation = HttpResponse.class))),
        
        @ApiResponse(responseCode = "503", description = "Base de datos no disponible", content = @Content(mediaType = "application/json", schema = @Schema(implementation = HttpResponse.class))) })
            @PostMapping(value = "/tournament",
                    produces = {"application/json"},
                    consumes = {"application/json"})
    ResponseEntity<HttpResponse> createTournament(@Parameter(in = ParameterIn.HEADER, description = "Token de autenticación del usuario" ,schema=@Schema()) @RequestHeader(required = false) String token, @Parameter(in = ParameterIn.DEFAULT, description = "Información del torneo (sin id ni código)", schema=@Schema()) @Valid @RequestBody Tournament body);


    @Operation(summary = "Eliminación de torneo", description = "", tags={ "tournament" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Torneo eliminado", content = @Content(mediaType = "application/json", schema = @Schema(implementation = HttpResponse.class))),
        
        @ApiResponse(responseCode = "404", description = "Torneo inexistente", content = @Content(mediaType = "application/json", schema = @Schema(implementation = HttpResponse.class))),
        
        @ApiResponse(responseCode = "500", description = "Error del servidor", content = @Content(mediaType = "application/json", schema = @Schema(implementation = HttpResponse.class))),
        
        @ApiResponse(responseCode = "503", description = "Base de datos no disponible", content = @Content(mediaType = "application/json", schema = @Schema(implementation = HttpResponse.class))) })
            @DeleteMapping(value = "/tournament",
                    produces = {"application/json"})
    ResponseEntity<HttpResponse> deleteTournament(@Parameter(in = ParameterIn.HEADER, description = "ID del torneo" ,required=true,schema=@Schema()) @RequestHeader(required = true) String tournamentId, @Parameter(in = ParameterIn.HEADER, description = "Token de autenticación del usuario" ,schema=@Schema()) @RequestHeader(required = false) String token);


    @Operation(summary = "Carga de torneo", description = "", tags={ "tournament" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Información obtenida con éxito", content = @Content(mediaType = "application/json", schema = @Schema(implementation = GetTournamentHttpResponse.class))),
        
        @ApiResponse(responseCode = "400", description = "Error en la request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = HttpResponse.class))),
        
        @ApiResponse(responseCode = "404", description = "Torneo inexistente", content = @Content(mediaType = "application/json", schema = @Schema(implementation = HttpResponse.class))),
        
        @ApiResponse(responseCode = "500", description = "Error del servidor", content = @Content(mediaType = "application/json", schema = @Schema(implementation = HttpResponse.class))),
        
        @ApiResponse(responseCode = "503", description = "Base de datos no disponible", content = @Content(mediaType = "application/json", schema = @Schema(implementation = HttpResponse.class))) })
            @GetMapping(value = "/tournament/{id}",
                    produces = {"application/json"})
    ResponseEntity<GetTournamentHttpResponse> getTournamentData(@Parameter(in = ParameterIn.PATH, description = "ID del torneo", required=true, schema=@Schema()) @PathVariable String id, @Parameter(in = ParameterIn.HEADER, description = "Código de acceso ingresado" ,required=true,schema=@Schema()) @RequestHeader(required = true) String code);


    @Operation(summary = "Actualización del torneo", description = "", tags={ "tournament" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Torneo actualizado", content = @Content(mediaType = "application/json", schema = @Schema(implementation = HttpResponse.class))),
        
        @ApiResponse(responseCode = "400", description = "Error en la request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = HttpResponse.class))),
        
        @ApiResponse(responseCode = "404", description = "Torneo inexistente", content = @Content(mediaType = "application/json", schema = @Schema(implementation = HttpResponse.class))),
        
        @ApiResponse(responseCode = "500", description = "Error del servidor", content = @Content(mediaType = "application/json", schema = @Schema(implementation = HttpResponse.class))),
        
        @ApiResponse(responseCode = "503", description = "Base de datos no disponible", content = @Content(mediaType = "application/json", schema = @Schema(implementation = HttpResponse.class))) })
            @PutMapping(value = "/tournament/{id}",
                    produces = {"application/json"},
                    consumes = {"application/json"})
    ResponseEntity<HttpResponse> updateTournament(@Parameter(in = ParameterIn.PATH, description = "ID del torneo", required=true, schema=@Schema()) @PathVariable String id, @Parameter(in = ParameterIn.HEADER, description = "Token de autenticación del usuario" ,schema=@Schema()) @RequestHeader(required = false) String token, @Parameter(in = ParameterIn.DEFAULT, description = "Información del torneo (sin id ni código)", schema=@Schema()) @Valid @RequestBody Tournament body);

}

